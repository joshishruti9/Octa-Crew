@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileProductService ProductService
@using ContosoCrafts.WebSite.Enums
@inject NavigationManager Navigation


<div class="filter-columns">
    <!-- Display the search box to filter cities -->
    <div>
        <input type="text" placeholder="Search by Title..." @bind="searchText" />

        <!-- Display the seasons to filter cities based on season-->
        <select class="seasonDropDown" @onchange="(e => OnSeasonFilterChange(e.Value?.ToString()))">
            <option value="0">All Seasons</option>
            <option value="1">Spring</option>
            <option value="2">Summer</option>
            <option value="3">Autumn</option>
            <option value="4">Winter</option>
        </select>

        <input type="number" placeholder="Enter Maximum Cost..." min="250" step="250" @bind="maxCost" />

        <input type="number" placeholder="Enter Maximum Travel Time..." min="1" step="1" @bind="maxTravelTime" />
    </div>
</div>

<!-- Display drop down of sorting options -->
<div class="sorting-row">
    <img class="sorting-icon" src="Content/Icons/sort-down.svg" />

    <select class="sorting-selection" @bind="@sortMethod" id="sorting-dropdown">

        @foreach(SortingEnum sortingMethod in Enum.GetValues(typeof(SortingEnum)))
        {
            if (sortingMethod == SortingEnum.Undefined)
            {
                <option value="@SortingEnum.Undefined" disabled selected>Sort by...</option>
                continue;
            }

            <option value=@sortingMethod>@sortingMethod.DisplayName()</option>
        }
    </select>
</div>

<br/>
<br/>

<div class="card-columns">
    <!-- Loop through all filtered and sorted products and display them as cards -->
    @foreach (var product in GetSortedProducts())
    {
        <div class="card" id="card_@product.Id">
            <!-- Display the first image of the product -->
            <div class="card-img" style="background-image: url('@product.Images[0]');">
            </div>

            <div class="card-body">
                <!-- Display the product title -->
                <h5 class="card-title">@product.Title</h5>
            </div>

            <div class="card-footer">
                <!-- Button to explore more details about the product -->
                <small class="text-muted">
                    <button @onclick="(e => SelectProduct(product.Id))"
                            id="ExploreMoreButton_@product.Id"
                            data-toggle="modal" data-target="#productModal"
                            class="btn btn-primary">
                        Explore More...
                    </button>
                </small>
            </div>
        </div>
    }
</div>

<!-- Modal to display detailed product information -->
@if (selectedProduct != null)
{
    <div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <!-- Display the product title in the modal header -->
                    <h5 class="modal-title" id="productTitle">@selectedProduct.Title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>

                <div class="modal-body">
                    <!-- Card showing the detailed product description and image -->
                    <div class="card">
                        <!-- Custom Carousel -->
                        <div class="carousel-container">
                            <div class="carousel-track" style="transform: translateX(@GetCarouselTransform());">
                                @foreach (var image in selectedProduct.Images)
                                {
                                    <div class="carousel-slide">
                                        <img src="@image" alt="@selectedProduct.Title" class="img-fluid" />
                                    </div>
                                }
                            </div>

                            <!-- Carousel buttons -->
                            <button class="carousel-button carousel-button-left" @onclick="MoveLeft">❮</button>
                            <button class="carousel-button carousel-button-right" @onclick="MoveRight">❯</button>
                        </div>


                        <div class="card-body">
                            <!-- Display the product description -->
                            <p class="card-text">@selectedProduct.Description</p>


                            <dl>
                                <dd>
                                    <a href="../Product/Map/@selectedProduct.Id" class="btn btn-map">Map</a>
                                </dd>

                                <dt>Information:</dt>

                                @* Check BestSeason has been set *@
                                @if (selectedProduct.BestSeason != SeasonEnum.Unknown)
                                {
                                    <dd>Best season to visit: @selectedProduct.BestSeason</dd>
                                }

                                @if (selectedProduct.Currency != null)
                                {
                                    <dd>Currency: @selectedProduct.Currency</dd>
                                }

                                @if (selectedProduct.TimeZone != null)
                                {
                                    <dd>Timezone: @selectedProduct.TimeZone</dd>
                                }

                                <dd>Cost: @selectedProduct.Cost $</dd>

                                <dd>Travel Time: @selectedProduct.TravelTime hr</dd>

                                @if (selectedProduct.Attractions.Any(attraction => string.IsNullOrEmpty(attraction) == false))
                                {
                                    <dt>Attractions:</dt>

                                    @foreach (string attraction in selectedProduct.Attractions)
                                    {
                                        <dd>@attraction</dd>
                                    }
                                }
                            </dl>
                        </div>
                    </div>
                </div>

                <div class="modal-footer">

                    <!-- Voting section -->
                    @if(voteCount == 0)
                    {
                        <span>Be the first to vote!</span>
                    }

                    @if (voteCount > 0)
                    {
                        <span>@voteCount @voteLabel</span>
                    }

                    <!-- Display star ratings -->
                    @for (int i = 1; i < 6; i++)
                    {
                        var currentStar = i;

                        // Display filled stars for current rating
                        if (i <= currentRating)
                        {
                            <span class="fa fa-star checked" @onclick="(e => SubmitRating(currentStar))"></span>
                        }

                        // Display unfilled stars for the remaining
                        if (i > currentRating)
                        {
                            <span class="fa fa-star" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}

<!-- Include Font Awesome for star icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code
{
    // Holds the selected product's details
    ProductModel selectedProduct = new ProductModel()
        {

            Id = System.Guid.NewGuid().ToString(),
            Images = new string[3],
            Title = null,
            Description = null,
            BestSeason = SeasonEnum.Unknown,
            Currency = null,
            TimeZone = null,
            Attractions = new string[3],
            Cost = 0,
            TravelTime = 0.0,
            Ratings = null

        };

    // Stores the ID of the selected product
    string selectedProductId;

    // Set searchText to empty string initially
    string searchText = string.Empty;

    // Set selectedSeason to empty string initially
    string selectedSeason = string.Empty;

    // Set maxCost to null initially
    int? maxCost = null;

    // Set maxTravelTime to null initially
    float? maxTravelTime = null;

    // Sorting type for the cities
    SortingEnum sortMethod;

    /// <summary>
    /// Sets the selected product details based on the given product ID
    /// </summary>
    /// <param name="productId">ID of the selected product</param>

    void SelectProduct(string productId)
    {
        selectedProductId = productId;
        selectedProduct = ProductService.GetAllData().First(x => x.Id == productId);
        GetCurrentRating();
    }

    // Holds the current rating of the selected product
    int currentRating = 0;

    // Total number of votes for the selected product
    int voteCount = 0;

    // Label to display "Vote" or "Votes" based on vote count
    string voteLabel;

    /// <summary>
    /// Retrieves and updates the current rating of the selected product
    /// </summary>

    void GetCurrentRating()
    {
        if(selectedProduct.Ratings == null)
        {
            currentRating = 0;
            voteCount = 0;
        }

        if(selectedProduct.Ratings != null)
        {
            voteCount = selectedProduct.Ratings.Count();
            voteLabel = voteCount > 1 ? "Votes" : "Vote";
            currentRating = selectedProduct.GetCityRating();
        }

        System.Console.WriteLine($"Current rating for {selectedProduct.Id}: {currentRating}");
    }

    /// <summary>
    /// Submits the given rating for the selected product
    /// </summary>
    /// <param name="rating">Rating to submit</param>

    void SubmitRating(int rating)
    {
        System.Console.WriteLine($"Rating received for {selectedProduct.Id}: {rating}");
        ProductService.AddRating(selectedProductId, rating);
        SelectProduct(selectedProductId);
    }

    /// <summary>
    /// Handles the change in season filter and updates the filtered product list.
    /// </summary>
    /// <param name="season">The selected season</param>

    void OnSeasonFilterChange(string season)
    {
        selectedSeason = null;

        if (season == "1")
        {
            selectedSeason = "1";
        }

        if (season == "2")
        {
            selectedSeason = "2";
        }

        if (season == "3")
        {
            selectedSeason = "3";
        }

        if (season == "4")
        {
            selectedSeason = "4";
        }
    }

    /// <summary>
    /// Applies both search text and season filters to the product list.
    /// </summary>

    IEnumerable<ProductModel> GetFilteredProducts()
    {
        var products = ProductService.GetAllData();

        // Apply search text filter
        if (!string.IsNullOrEmpty(searchText))
        {
            products = products.Where(product =>
                product.Title.Contains(searchText, StringComparison.OrdinalIgnoreCase));
        }

        // Apply season filter
        if (!string.IsNullOrEmpty(selectedSeason))
        {
            if (Enum.TryParse<SeasonEnum>(selectedSeason, out var season))
            {
                products = products.Where(product => product.BestSeason == season);
            }
        }

        // Apply cost filter
        if (maxCost > 0)
        {
            products = products.Where(products => products.Cost <= maxCost);
        } 

        // Apply travel time filter
        if (maxTravelTime > 0)
        {
            products = products.Where(products => products.TravelTime <= maxTravelTime);
        } 

        return products;
    }

    /// <summary>
    /// Sort the cities according to the sorting type
    /// </summary>
    /// <returns>The filtered cities arranged in sorted order</returns>
    IEnumerable<ProductModel> GetSortedProducts()
    {
        // The filtered cities
        var products = GetFilteredProducts();

        switch (sortMethod)
        {
            case SortingEnum.Rating:
                products = products.OrderByDescending(x => x.GetCityRating());
                break;

            case SortingEnum.TravelTime:
                products = products.OrderBy(x => x.TravelTime);
                break;

            case SortingEnum.Cost:
                products = products.OrderBy(x => x.Cost);
                break;

            default:
                break;
        }

        return products;
    }

        private int currentSlideIndex = 0;

        /// <summary>
        /// Move carousel to the left
        /// </summary>
        private void MoveLeft()
        {
            currentSlideIndex = (currentSlideIndex - 1 + selectedProduct.Images.Length) % selectedProduct.Images.Length;
        }

        /// <summary>
        /// Move carousel to the right
        /// </summary>
        private void MoveRight()
        {
            currentSlideIndex = (currentSlideIndex + 1) % selectedProduct.Images.Length;

        }

        /// <summary>
        /// Calculates the transform value for the carousel based on the current index
        /// </summary>
        /// <returns>Transform CSS value</returns>
        private string GetCarouselTransform()
        {
            return $"-{currentSlideIndex * 100}%";
        }
    
}