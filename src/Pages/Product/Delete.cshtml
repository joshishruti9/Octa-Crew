@page
@using ContosoCrafts.WebSite.Enums
@using ContosoCrafts.WebSite.Pages.Product
@using ContosoCrafts.WebSite.Services
@inject JsonFileProductService ProductService
@model DeleteModel
@{
	ViewData["Title"] = "Delete page";
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

<div class="text-center">
    <h1 class="display4"> Delete</h1>
</div>

<div class="container">
    <h4 class="title" id="productTitle">@Model.Product.Title</h4>

    <div class="card-columns">
        @foreach (string image in Model.Product.Images)
        {
            <img class="card-img" src='@image' alt="Image for @Model.Product.Title" />
        }
    </div>

    <p class="description">@Model.Product.Description</p>

    <dl>
        <dt>Information:</dt>

        @* Check for each value of SeasonEnum to check that it is != Unknown or != null *@
        @if (Model.Product.BestSeason == SeasonEnum.Spring)
        {
            <dd>Best season to visit: Spring</dd>
        }

        @if (Model.Product.BestSeason == SeasonEnum.Summer)
        {
            <dd>Best season to visit: Summer</dd>
        }

        @if (Model.Product.BestSeason == SeasonEnum.Fall)
        {
            <dd>Best season to visit: Fall</dd>
        }

        @if (Model.Product.BestSeason == SeasonEnum.Winter)
        {
            <dd>Best season to visit: Winter</dd>
        }

        @if (Model.Product.Currency != null)
        {
            <dd>Currency: @Model.Product.Currency</dd>
        }

        @if (Model.Product.TimeZone != null)
        {
            <dd>Timezone: @Model.Product.TimeZone</dd>
        }

        <dd>Cost: @Model.Product.Cost $</dd>

        <dd>Travel Time: @Model.Product.TravelTime hr</dd>

        @if (Model.Product.Attractions.Any(attraction => string.IsNullOrEmpty(attraction) == false))
        {
            <dt>
                Attractions:
                @foreach (string attraction in Model.Product.Attractions)
                {
                    <dd class="card-text">@attraction</dd>
                }
            </dt>
        }
    </dl>

    <p>Rating: 
        @{
            int currentRating = Model.Product.GetCityRating();

            for (int i = 1; i < 6; i++)
            {
                if (i <= currentRating)
                {
                    <span class="fa fa-star checked no-pointer"></span>
                }

                if(i > currentRating)
                {
                    <span class="fa fa-star no-pointer"></span>
                }
            }

            string voteString;
            if (Model.Product.Ratings == null)
            {
                voteString = "0 Votes";
                <span>@voteString</span>
            }

            if(Model.Product.Ratings != null)
            {
                int voteCount = Model.Product.Ratings.Count();
                voteString = voteCount + (voteCount == 1 ? " Vote" : " Votes");
                <span>@voteString</span>
            }

        }
    </p>
</div>

<div class="form-container">
  <form method="post">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        @Html.HiddenFor(x => x.Product.Id)

        <div class="form-group">
            <input type="hidden" asp-for="Product.Title" />
        </div>

        <div class="form-group">
            <input type="hidden" asp-for="Product.Description" />
        </div>

        <div class="form-group">
            @for (int i = 0; i < Model.Product.Images.Length; i++)
            {
                <input type="hidden" asp-for="Product.Images[@i]" />
            }
        </div>

        <div class="form-group">
            <label asp-for="Product.BestSeason" class="control-label">Best Season to visit</label>
            <input asp-for="Product.BestSeason" class="form-control" />
            <span asp-validation-for="Product.BestSeason" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="Product.Currency" class="control-label">Currency</label>
            <input asp-for="Product.Currency" class="form-control" />
            <span asp-validation-for="Product.Currency" class="text-danger"></span>
        </div>

        <div class="form-group">
            @for (int i = 0; i < Model.Product.Attractions.Length; i++)
            {
                <label asp-for="Product.Attractions[@i]" class="control-label">Attractions @(i + 1)</label>
                <input asp-for="Product.Attractions[@i]" class="form-control mb-2" />
                <span asp-validation-for="Product.Attractions[@i]" class="text-danger"></span>
            }
        </div>

        <div class="form-group">
            <label asp-for="Product.TimeZone" class="control-label">Time Zone</label>
            <input asp-for="Product.TimeZone" class="form-control" />
            <span asp-validation-for="Product.TimeZone" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="Product.Cost" class="control-label">Cost</label>
            <input asp-for="Product.Cost" class="form-control" />
            <span asp-validation-for="Product.Cost" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="Product.TravelTime " class="control-label">Travel Time </label>
            <input asp-for="Product.TravelTime" class="form-control" />
            <span asp-validation-for="Product.TravelTime" class="text-danger"></span>
        </div>

        <div class="form-group">
            <h3>Are You Sure You Want to Delete?</h3>
        </div class=form-group>

        <div class="form-group">
            <input type="submit" value="Confirm" class="btn btn-primary" />
        </div>
    </form>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
}